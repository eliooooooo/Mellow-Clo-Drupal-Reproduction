{#
/**
 * @file
 * Default theme implementation to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: (optional) The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - date: (optional) Themed creation date field.
 * - author_name: (optional) Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 *
 * @see template_preprocess_node()
 *
 * @ingroup themeable
 */
#}
{%
  set classes = [
    'group',
    'flex',
    'flex-col',
    'w-fit',
    'relative',
  ]
%}

{%
  set title_classes = [
    'text-xl',
    'leading-8',
    'text-left'
  ]
%}

<a{{ attributes.addClass(classes) }} href="{{ url }}" rel="bookmark">
  <div class="absolute z-10 opacity-0 scale-0 group-hover:opacity-100 group-hover:scale-100 transition duration-300 top-0 right-0 flex flex-col items-center justify-center bg-black rounded-full text-white h-16 w-16 translate-x-1/4 -translate-y-1/4 hover:scale-110" >
    <span class="text-sm">Quick</span>
    <span class="text-sm">View</span>
  </div>

  <div class="relative">
    <div>{{ content.field_product_images[1] }}</div>
    <div class="absolute top-0 group-hover:opacity-0 transition ease-in-out duration-500">{{ content.field_product_images[0] }}</div>
  </div>
  <div class="flex flex-col pt-2.5 pb-2 gap-2">
    <h2{{ title_attributes.addClass(title_classes) }}>{{ label }}</h2>
    <p class="text-base text-left leading-6" >â‚¬{{ content.field_product_price.0 }}</p>
  </div>

</a>
